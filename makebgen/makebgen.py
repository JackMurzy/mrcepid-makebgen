#!/usr/bin/env python
# mrcepid-collapsevariants 0.0.1
# Generated by dx-app-wizard.
#
# Author: Eugene Gardner (eugene.gardner at mrc.epid.cam.ac.uk)
#
# DNAnexus Python Bindings (dxpy) documentation:
#   http://autodoc.dnanexus.com/bindings/python/current/
import csv

import dxpy
from general_utilities.association_resources import (
    check_gzipped
)
from general_utilities.import_utils.file_handlers.dnanexus_utilities import generate_linked_dx_file
from general_utilities.import_utils.file_handlers.input_file_handler import InputFileHandler
from general_utilities.job_management.thread_utility import ThreadUtility
from general_utilities.mrc_logger import MRCLogger

from makebgen.process_bgen.process_bgen import make_final_bgen, make_bgen_from_vcf

LOGGER = MRCLogger().get_logger()


@dxpy.entry_point('main')
def main(output_prefix: str, coordinate_file: str, make_bcf: bool) -> dict:
    """Main entry point into this applet. This function initiates the conversion of all bcf files for a given chromosome
    into a single .bgen file.

    Coordinate file must have the following columns:

        chrom   start   end     vcf_prefix      output_bcf      output_bcf_idx  output_vep      output_vep_idx

    :param output_prefix: Output prefix. Output file will be named <output_prefix>.bgen
    :param coordinate_file: A file containing the coordinates of all bcf files to be processed.
    :param make_bcf: Should a concatenated bcf be made in addition to the bgen?
    :return: An output dictionary following DNANexus conventions.
    """

    # Get the processed coordinate file
    total_bcf = 0

    # start the file parser class and get the coordinates file
    coordinates = InputFileHandler(coordinate_file)
    coordinate_path = coordinates.get_file_handle()

    with check_gzipped(coordinate_path) as coord_file:
        coord_file_reader = csv.DictReader(coord_file, delimiter="\t")

        thread_utility = ThreadUtility(incrementor=100,
                                       thread_factor=2,
                                       error_message='A bcf to bgen thread failed')
        previous_vep_id = None
        for row in coord_file_reader:
            total_bcf += 1
            thread_utility.launch_job(make_bgen_from_vcf,
                                      vcf_id=row['output_bcf'],
                                      vep_id=row['output_vep'],
                                      previous_vep_id=previous_vep_id,
                                      start=row['start'],
                                      make_bcf=make_bcf,
                                      input_coordinates=coordinates)
            previous_vep_id = row['output_vep']

        # And gather the resulting futures which are returns of all bgens we need to concatenate:
        bgen_prefixes = {}
        for result in thread_utility:
            bgen_prefixes[result['vcfprefix']] = result['start']

    # Convert all input bcfs to bgen
    LOGGER.info(f'Converting {total_bcf} bcf(s) to single bgen')

    # Now mash all the bgen files together
    LOGGER.info(f'Merging bgen files into {output_prefix}.bgen...')
    final_files = make_final_bgen(bgen_prefixes, output_prefix, make_bcf)

    # Set output
    output = {'bgen': dxpy.dxlink(generate_linked_dx_file(final_files['bgen']['file'])),
              'index': dxpy.dxlink(generate_linked_dx_file(final_files['bgen']['index'])),
              'sample': dxpy.dxlink(generate_linked_dx_file(final_files['bgen']['sample'])),
              'vep': dxpy.dxlink(generate_linked_dx_file(final_files['vep']['file'])),
              'vep_idx': dxpy.dxlink(generate_linked_dx_file(final_files['vep']['index']))}

    if final_files['bcf']['file'] is not None:
        output['bcf'] = dxpy.dxlink(generate_linked_dx_file(final_files['bcf']['file']))
        output['bcf_idx'] = dxpy.dxlink(generate_linked_dx_file(final_files['bcf']['index']))

    return output


dxpy.run()
